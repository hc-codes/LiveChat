name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code_quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Java 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'
          architecture: 'x64'

      - name: Check Java version
        run: java -version

      - name: Install Latest SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          echo "$(pwd)/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Verify SonarScanner version
        run: sonar-scanner --version

      - name: Run SonarCloud Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=hc-codes_LiveChat \
            -Dsonar.organization=hc-codes \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.exclusions=**/*.html
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            
  # Continuous Integration: Build and Unit Tests
  ci:
    runs-on: ubuntu-latest
    needs: code_quality
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0'

      - name: Restore Dependencies
        run: dotnet restore  # Restore NuGet packages

      - name: Build the Application
        run: dotnet build --configuration Release  # Build the project

      - name: Run Unit Tests
        run: dotnet test  # Run the unit tests

  # Deployment to Staging
  deploy_production:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Install Node.js and npm
        run: |
          curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -
          sudo apt-get install -y nodejs
  
      - name: Install Vercel CLI
        run: npm install -g vercel
  
      - name: Deploy to Vercel
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes

  # Monitoring after Deployment
  monitoring:
    runs-on: ubuntu-latest
    needs: deploy_production
    steps:
      - name: Set up Monitoring (e.g., Sentry, New Relic)
        run: |
          curl -X POST https://api.sentry.io/monitoring --data "deployment=production"

  # Project Management: Update Issues or PRs Based on Merge
  project_management:
    runs-on: ubuntu-latest
    needs: deploy_production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Update GitHub Issues (if PR is merged)
        run: |
          PR_NUMBER=$(curl -s https://api.github.com/repos/${{ github.repository }}/pulls | jq '.[0].number')
          curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state": "closed"}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER"

  # Testing (integration or end-to-end tests)
  tests:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0'

      - name: Restore Dependencies
        run: dotnet restore  # Restore NuGet packages

      - name: Run Integration Tests
        run: dotnet test --filter "Category=Integration"  # Run specific tests for integration
