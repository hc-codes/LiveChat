name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  code_quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # Specify Java 17
          distribution: 'temurin'  # Use Eclipse Temurin as the distribution
          architecture: 'x64'

      - name: Set up SonarCloud
        uses: SonarSource/sonarcloud-github-action@v1
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Run SonarCloud Analysis
        run: |
          sonar-scanner -Dsonar.exclusions=**/*.html 
            
  # Continuous Integration: Build and Unit Tests
  ci:
    runs-on: ubuntu-latest
    needs: code_quality
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0'

      - name: Restore Dependencies
        run: dotnet restore  # Restore NuGet packages

      - name: Build the Application
        run: dotnet build --configuration Release  # Build the project

      - name: Run Unit Tests
        run: dotnet test  # Run the unit tests

  # Deployment to Staging
  deploy_staging:
    runs-on: ubuntu-latest
    needs: ci
    environment: staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up SSH for deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Publish Application
        run: dotnet publish --configuration Release --output ./publish  # Publish to a folder

      - name: Deploy to Staging Server
        run: |
          scp -r ./publish/* user@staging-server:/path/to/deploy
          ssh user@staging-server "sudo systemctl restart your-app-service"  # Restart app (service-based deploy)

  # Deployment to Production
  deploy_production:
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: github.ref == 'refs/heads/master'
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up SSH for production deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Publish Application
        run: dotnet publish --configuration Release --output ./publish  # Publish for production

      - name: Deploy to Production Server
        run: |
          scp -r ./publish/* user@production-server:/path/to/deploy
          ssh user@production-server "sudo systemctl restart your-app-service"  # Restart app (service-based deploy)

  # Monitoring after Deployment
  monitoring:
    runs-on: ubuntu-latest
    needs: deploy_production
    steps:
      - name: Set up Monitoring (e.g., Sentry, New Relic)
        run: |
          curl -X POST https://api.sentry.io/monitoring --data "deployment=production"

  # Project Management: Update Issues or PRs Based on Merge
  project_management:
    runs-on: ubuntu-latest
    needs: deploy_production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Update GitHub Issues (if PR is merged)
        run: |
          PR_NUMBER=$(curl -s https://api.github.com/repos/${{ github.repository }}/pulls | jq '.[0].number')
          curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state": "closed"}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER"

  # Testing (integration or end-to-end tests)
  tests:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0'

      - name: Restore Dependencies
        run: dotnet restore  # Restore NuGet packages

      - name: Run Integration Tests
        run: dotnet test --filter "Category=Integration"  # Run specific tests for integration
