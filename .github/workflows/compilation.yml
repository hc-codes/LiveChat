name: CI/CD Pipeline

on:
  push:
    branches:
      - maste
  pull_request:
    branches:
      - master

jobs:
  # Code Quality Check: Linting, Static Analysis
  code_quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js (or your respective language/environment)
        uses: actions/setup-node@v2
        with:
          node-version: '16'  # Use your preferred version

      - name: Install Dependencies
        run: npm install  # Change this based on your package manager (e.g., yarn, pip)

      - name: Run Linting
        run: npm run lint  # Ensure you have a linting script in your package.json or config

      - name: Run Static Analysis (Optional, e.g., SonarQube)
        run: |
          curl -sS https://sonarcloud.io/install.sh | bash
          sonar-scanner # This runs SonarQube static analysis if configured

  # Continuous Integration: Build and Unit Tests
  ci:
    runs-on: ubuntu-latest
    needs: code_quality
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js (or your respective language/environment)
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm test  # Ensure your tests are properly configured

  # Deployment to Staging (or Production)
  deploy_staging:
    runs-on: ubuntu-latest
    needs: ci
    environment: staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up SSH for deployment (if needed)
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Staging Server
        run: |
          scp -r ./dist user@staging-server:/path/to/deploy
          ssh user@staging-server "docker-compose up -d" # Example for Docker deployment

  # Deployment to Production
  deploy_production:
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: github.ref == 'refs/heads/master'
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up SSH for production (if needed)
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Production Server
        run: |
          scp -r ./dist user@production-server:/path/to/deploy
          ssh user@production-server "docker-compose up -d" # Example for Docker deployment

  # Monitoring after Deployment
  monitoring:
    runs-on: ubuntu-latest
    needs: deploy_production
    steps:
      - name: Set up Monitoring (e.g., Sentry, New Relic)
        run: |
          curl -X POST https://api.sentry.io/monitoring --data "deployment=production"

  # Project Management: Update Issues or PRs Based on Merge
  project_management:
    runs-on: ubuntu-latest
    needs: deploy_production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Update GitHub Issues (if PR is merged)
        run: |
          PR_NUMBER=$(curl -s https://api.github.com/repos/${{ github.repository }}/pulls | jq '.[0].number')
          curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state": "closed"}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER"

  # Testing (integration or end-to-end tests)
  tests:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js (or your respective language/environment)
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Integration Tests
        run: npm run integration-tests # Ensure this command is defined in your package.json or config
